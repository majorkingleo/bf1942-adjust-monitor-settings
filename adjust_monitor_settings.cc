#include <iostream>
#include <fstream>
#include <string>
#include <windows.h>
#include <winuser.h>
#include <cppdir.h>
#include <cpputils.h>
#include <xml.h>
#include <string_utils.h>
#include <set>
#include <errno.h>
#include <aclapi.h>
#include <tchar.h>
#include <memory>

using namespace Tools;

const std::string VIDEO_CON = "Video.con";

int grant_write( const std::string & file )
{
  SetFileAttributesA( file.c_str(), FILE_ATTRIBUTE_NORMAL );

  return true;
}

int grant_readonly( const std::string & file )
{
  SetFileAttributesA( file.c_str(), FILE_ATTRIBUTE_READONLY );

  return true;
}

struct MonitorData
{
    int64_t frequ;
    int64_t depth;
    int64_t width;
    int64_t height;
};

MonitorData get_monitor_data()
{
    DEVMODEA mode = {};

    if( !EnumDisplaySettingsA( nullptr, ENUM_CURRENT_SETTINGS, &mode ) ) {
        throw REPORT_EXCEPTION( "failed calling EnumDisplaySettingsA");
    }

    return { mode.dmDisplayFrequency,
             mode.dmBitsPerPel,
             mode.dmPelsWidth,
             mode.dmPelsHeight };
}

void write_video_con( const std::string & path, const MonitorData & monitor )
{   
    std::string file = CppDir::concat_dir( path, VIDEO_CON );

    std::cout << "generating: " << file << std::endl;

    grant_write(file );

    std::ofstream out( file.c_str(), std::ios_base::out | std::ios_base::trunc);

    if( !out ) {
        std::cerr << format("cannot open file '%s'\nError: %s", file, strerror(errno)) << "\n";
        return;
    }


    out << "# automatically generated by adjust_monitor_settings\n";

    out << "game.setGameDisplayMode " << monitor.width 
                               << " " << monitor.height 
                               << " " << monitor.depth 
                               << " " << monitor.frequ << "\n"
        << "game.setDetailTexture 5\n"
        << "game.setShadows 1\n"
        << "game.setEnvironmentMapping 1\n"
        << "game.setGraphicsQuality 3\n"
        << "game.setLightmaps 1\n"
        << "game.setRenderWhenSpawnMenu 1\n"
        << "game.setMenuViewdistance 100\n"
        << "game.setEffectsQuality 4\n"
        << "game.setPerformance 0\n";

    out.close();

    grant_readonly(file );
}

std::string get_user_profile( const std::string & bf_base_folder )
{
    std::string content;
    const std::string profile_file = CppDir::concat_dir( bf_base_folder, R"(Mods\bf1942\Settings\Profile.con)");
    if( !XML::read_file( profile_file,
                         content ) ) {
        throw REPORT_EXCEPTION( format( "cannot open: '%s'", profile_file ) );
    }

    // the file looks like this:
    // rem ** MajorLeo **
    // game.setProfile "MajorLeo"

    auto sl = split_and_strip_simple( content, "\n" );

    for( auto line : sl ) {
        if( line.find( "game.setProfile" ) != std::string::npos ) {
            auto entries = split_simple( line );

            if( entries.size() < 2 ) {
                throw REPORT_EXCEPTION( format( "Cannot parse line: '%s'", line ) );
            }

            std::string entry = strip(entries[1], " \"\t" );
            return entry;
        }
    }

    return std::string();
}

int main()
{
    try {
        auto monitor = get_monitor_data();

        std::cout << "Monitor: width: " << monitor.width
              << " height: " << monitor.height
              << " color depth: " << monitor.depth
              << " refresh rate: " << monitor.frequ
              << "\n";

        std::string start = CppDir::pwd();

        CppDir::File f_video_con( CppDir::concat_dir( start,VIDEO_CON ) );

        if( f_video_con.is_valid() ) {
            write_video_con( start, monitor );    
        }
        
        CppDir::File f_bf1942_exe( CppDir::concat_dir( start, "bf1942.exe" ) );

        if( !f_bf1942_exe.is_valid() ) {
             f_bf1942_exe = CppDir::File( CppDir::concat_dir( start, "..", "bf1942.exe" ) );
        }

        if( !f_bf1942_exe.is_valid() ) {
            throw REPORT_EXCEPTION( "Cannot find user setting location.\n"
                                    "Please run this program in battlefield folder or profile settings folder");
        }

        std::string bf_base_folder = f_bf1942_exe.get_path();

        bool current_profile_only = false;
        if( current_profile_only ) {
            std::string profile = get_user_profile(bf_base_folder);
            std::cout << "Profile found: " << profile << std::endl;

            std::string profile_folder = CppDir::concat_dir(bf_base_folder, R"(Mods\bf1942\Settings\Profiles)", profile);

            write_video_con(profile_folder, monitor);
        } else {
            std::string profiles_folder = CppDir::concat_dir(bf_base_folder, R"(Mods\bf1942\Settings\Profiles)" );

            CppDir::Directory dir( profiles_folder );

            if( !dir ) {
                throw REPORT_EXCEPTION( format( "cannot list dir '%s'", profiles_folder));
            }

            std::set<std::string> files_to_ignore = {"Default", "Custom", ".", ".."};

            for( auto file : dir.get_files() ) {
                if( files_to_ignore.count(file.get_name()) > 0 ) {
                    continue;
                }

                std::string profile = file.get_name();
                //std::cout << "Profile found: " << profile << std::endl;

                std::string profile_folder = CppDir::concat_dir(bf_base_folder, R"(Mods\bf1942\Settings\Profiles)", profile);

                write_video_con(profile_folder, monitor);
            }
        }
        std::cout << "done\n";
    } catch( const std::exception & error ) {
        std::cerr << error.what() << std::endl;       
    }

    system("PAUSE");
}